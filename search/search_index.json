{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"The Radon Programming Language","text":"Radon  is a programming language that is designed to be easy to learn and use.    <p>Maintained by Md. Almas Ali</p> <p> </p> <p>Website: https://radon-project.github.io</p> <p>Documentation: https://radon-project.github.io/docs</p> <p>Github: https://github.com/radon-project/radon</p>"},{"location":"index.html#introduction","title":"Introduction","text":"<p>Radon is a programming language that is designed to be easy to learn and use. It is a high-level language intended to be used for general purpose programming. It is designed to be easy to learn and use, while still being powerful enough to be used for most tasks.</p> <p>Some of the features of Radon include:</p> <ul> <li>A simple syntax that is easy to learn and use</li> <li>Dynamic typing so that you don't have to worry about types</li> <li>Powerful standard library that makes it easy to do common tasks (Development)</li> <li>Easy to use package manager that makes it easy to install packages (Future feature)</li> <li>Functional programming support</li> <li>Object-oriented programming support (Development)</li> <li>Easy to use concurrency support (Future feature)</li> <li>Easy to use GUI library (Future feature)</li> <li>Easy to use web development library (Future feature)</li> <li>Advanced command line interface (Development)</li> <li>Easy to use networking library (Future feature)</li> <li>Easy to use database library (Future feature)</li> <li>Easy to use graphics library (Future feature)</li> </ul>"},{"location":"index.html#login-logic","title":"Login Logic","text":"Login.rn<pre><code># This is a Radon test file for the Radon Programming Language.\n\nclass Network {\n    fun __constructor__(username, password) {\n        this.username = username\n        this.password = password\n    }\n\n    fun login() {\n        if this.username == \"radon\" {\n            if this.password == \"password\" {\n                print(\"Log in successful\")\n            }\n        } else {\n            print(\"Invalid credentials\")\n        }\n    }\n}\n\nusername = input(\"Enter you username: \")\npassword = input(\"Enter your password: \")\n\nnetwork = Network(username, password)\nnetwork.login()\n</code></pre>"},{"location":"index.html#sponsors","title":"Sponsors","text":"<p>No sponsors yet. Be the first one to sponsor this project. Become a sponsor</p>"},{"location":"arrays.html","title":"Arrays","text":""},{"location":"arrays.html#array-methods","title":"Array methods","text":"<ul> <li><code>arr_len()</code> - returns the length of the array</li> <li><code>arr_push(array, item)</code> - adds an item to the end of the array</li> <li><code>arr_pop(array, index)</code> - removes an item from the end of the array</li> <li><code>arr_append(array, item)</code> - adds an item to the end of the array</li> <li><code>arr_extend(array1, array2)</code> - adds all the items of an array to   the end of the array</li> <li><code>arr_find(array, index)</code> - returns the item at the specified index</li> <li><code>arr_slice(array, start, end)</code> - returns the items from the specified   start index to the specified end index</li> </ul> methods.rn<pre><code>arr = [1, 2, 3, 4, 5]\nprint(arr_len(arr)) # 5\n\narr_push(arr, 6)\nprint(arr) # [1, 2, 3, 4, 5, 6]\n\narr_pop(arr)\nprint(arr) # [1, 2, 3, 4, 5]\n\narr_append(arr, 6)\nprint(arr) # [1, 2, 3, 4, 5, 6]\n\narr_extend(arr, [7, 8, 9])\nprint(arr) # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(arr_find(arr, 0)) # 1\nprint(arr_find(arr, 1)) # 2\n\nprint(arr_slice(arr, 0, 5)) # [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"arrays.html#array-operators-development","title":"Array operators (Development)","text":"<ul> <li><code>+</code> (concatenation)</li> <li><code>*</code> (repetition)</li> </ul> operators.rn<pre><code>arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n\nprint(arr1 + arr2) # [1, 2, 3, 4, 5, 6]\nprint(arr1 * 2) # [1, 2, 3, 1, 2, 3]\n</code></pre>"},{"location":"arrays.html#array-standard-library","title":"Array standard library","text":"<ul> <li><code>map(func)</code> - returns a new array with the result of calling the specified   function on each item of the array</li> <li><code>append(item)</code> - adds an item to the end of the array</li> <li><code>pop(index)</code> - removes an item from the end of the array</li> <li><code>extend(list)</code> - adds all the items of an array to the end of the array</li> <li><code>find(index)</code> - returns the item at the specified index</li> <li><code>slice(start, end)</code> - returns the items from the specified start index to   the specified end index</li> <li><code>len()</code> - returns the length of the array</li> <li><code>is_empty()</code> - returns <code>true</code> if the array is empty, otherwise <code>false</code></li> <li><code>to_string()</code> - returns the string representation of the array</li> <li><code>is_array()</code> - returns <code>true</code> if the value is an array, otherwise <code>false</code></li> </ul> array-standard-library.rn<pre><code>include Array # Include the Array standard library\n\n# Create an array instance using the Array class\narr = Array([1, 2, 3, 4, 5])\n\nprint(arr.len()) # 5\nprint(arr.is_empty()) # false\nprint(arr.to_string()) # \"[1, 2, 3, 4, 5]\"\nprint(arr.is_array()) # true\n\nprint(arr.map(fun (item) {\n    return str(item)\n})) # [\"1\", \"2\", \"3\", \"4\", \"5\"]\n\nprint(arr.append(6)) # [1, 2, 3, 4, 5, 6]\nprint(arr.pop(5)) # [1, 2, 3, 4, 5]\n\nprint(arr.extend([6, 7, 8])) # [1, 2, 3, 4, 5, 6, 7, 8]\nprint(arr.find(0)) # 1\nprint(arr.find(1)) # 2\n\nprint(arr.slice(0, 5)) # [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"built-in-functions.html","title":"Built-in Functions","text":""},{"location":"built-in-functions.html#types-of-built-in-functions","title":"Types of built-in functions","text":"<p>Built-in functions are the functions that are built into the language. They are used to perform common tasks. In Radon, there are a list of built-in functions that are available to use.</p> <p>They are:</p>"},{"location":"built-in-functions.html#utility-methods","title":"Utility methods","text":"<ul> <li><code>cls()</code> - clears the screen.</li> <li><code>clear()</code> - clears the screen.</li> <li><code>exit()</code> - exits the program.</li> </ul>"},{"location":"built-in-functions.html#same-as-include-statement","title":"Same as include statement","text":"<ul> <li><code>require()</code> - same as include statement to include a file or   library in the current program.</li> </ul>"},{"location":"built-in-functions.html#command-line-arguments","title":"Command line arguments","text":"<ul> <li><code>sys_args()</code> - returns the command line arguments.</li> </ul>"},{"location":"built-in-functions.html#api-methods","title":"API methods","text":"<ul> <li><code>pyapi(string)</code> - A high-level Python API for Radon.   It is used to call Python functions from Radon. (Development)</li> </ul>"},{"location":"built-in-functions.html#typecase-methods","title":"Typecase methods","text":"<ul> <li><code>int()</code> - converts any value to an integer.</li> <li><code>float()</code> - converts any value to a float.</li> <li><code>str()</code> - converts any value to a string.</li> <li><code>bool()</code> - converts any value to a boolean.</li> <li><code>type()</code> - returns the type of the value.</li> </ul>"},{"location":"built-in-functions.html#type-checker-methods","title":"Type checker methods","text":"<ul> <li><code>is_num()</code> - returns <code>true</code> if the value is a number, otherwise <code>false</code>.</li> <li><code>is_int()</code> - returns <code>true</code> if the value is an integer, otherwise <code>false</code>.</li> <li><code>is_float()</code> - returns <code>true</code> if the value is a float, otherwise <code>false</code>.</li> <li><code>is_str()</code> - returns <code>true</code> if the value is a string, otherwise <code>false</code>.</li> <li><code>is_bool()</code> - returns <code>true</code> if the value is a boolean, otherwise <code>false</code>.</li> <li><code>is_array()</code> - returns <code>true</code> if the value is an array, otherwise <code>false</code>.</li> <li><code>is_fun()</code> - returns <code>true</code> if the value is a function, otherwise <code>false</code>.</li> </ul>"},{"location":"built-in-functions.html#string-methods","title":"String methods","text":"<ul> <li><code>str_len()</code> - returns the length of the string.</li> <li><code>str_find(string, index)</code> - returns the character at the specified index.</li> <li><code>str_slice(string, start, end)</code> - returns the substring from the specified   start index to the specified end index.</li> </ul>"},{"location":"built-in-functions.html#io-methods","title":"I/O methods","text":"<ul> <li><code>print()</code> - prints the specified value to the console.</li> <li><code>print_ret()</code> - prints the specified value to the console   and returns the value.</li> <li><code>input()</code> - reads a line from the console.</li> <li><code>input_int()</code> - reads an integer from the console.</li> </ul>"},{"location":"built-in-functions.html#array-methods","title":"Array methods","text":"<ul> <li><code>arr_len()</code> - returns the length of the array.</li> <li><code>arr_push(array, item)</code> - adds an item to the end of the array.</li> <li><code>arr_pop(array, index)</code> - removes an item from the end of the array.</li> <li><code>arr_append(array, item)</code> - adds an item to the end of the array.</li> <li><code>arr_extend(array1, array2)</code> - adds all the items of an array to the end   of the array.</li> <li><code>arr_find(array, index)</code> - returns the item at the specified index.</li> <li><code>arr_slice(array, start, end)</code> - returns the items from the specified start   index to the specified end index.</li> </ul>"},{"location":"classes.html","title":"Classes and Objects","text":""},{"location":"classes.html#object-oriented-programming","title":"Object Oriented Programming","text":"<p>Object Oriented Programming (OOP) is a programming paradigm that uses objects and their interactions to design and program applications. It is based on the concept of objects rather than just functions and procedures. These objects are organized into classes, which allow individual objects to be grouped together. Most modern programming languages including Java, C/C++, and Python are object-oriented languages, and many older programming languages now have object-oriented versions.</p> <p>In Radon, we also have support for OOP. We can create classes and objects. We can also create methods and fields.</p>"},{"location":"classes.html#classes","title":"Classes","text":"<p>Let's start by creating a class. We can create a class using the <code>class</code> keyword. It is followed by the name of the class and the body of the class. The body of the class is enclosed in curly braces.</p> classes.rn<pre><code>class Person {\n    # Class body\n}\n</code></pre>"},{"location":"classes.html#objects","title":"Objects","text":"<p>Now that we have created a class, we can create an object. We can create an object by simply calling the class like as a function. It is followed by the name of the class and the arguments in parentheses. The arguments are optional.</p> objects.rn<pre><code>person = Person();\n</code></pre>"},{"location":"classes.html#fields","title":"Fields","text":"<p>Fields are the variables that are declared inside a class. They are used to store data. They are also called instance variables because they are unique to each instance of the class. They are declared using the <code>var</code> keyword. It is followed by the name of the field and the type of the field. The type of the field is optional.</p> fields.rn<pre><code>class Person {\n    name = \"John\"\n    age = 20\n}\n</code></pre>"},{"location":"classes.html#constructors","title":"Constructors","text":"<p>Constructors are special methods that are used to initialize the fields of a class. They are called when an object is created. They are declared using the <code>fun</code> keyword. It is followed by the name (class name) of the constructor and the parameters in parentheses. The parameters are optional.</p> constructors.rn<pre><code>class Person {\n    fun Person(name, age) {\n        this.name = name\n        this.age = age\n    }\n}\n\nperson = Person(\"John\", 20)\n</code></pre>"},{"location":"classes.html#methods","title":"Methods","text":"<p>Methods are the functions that are declared inside a class. They are used to define the behavior of the class. They are declared using the <code>fun</code> keyword. It is followed by the name of the method, the parameters in parentheses, and the return type. The parameters and the return type are optional.</p> methods.rn<pre><code>class Person {\n    fun Person(name, age) {\n        this.name = name\n        this.age = age\n    }\n\n    fun sayHello() {\n        print(\"Hello, \" + this.name + \"!\")\n    }\n}\n\nperson = Person(\"John\", 20)\nperson.sayHello() # Output: Hello, John!\n</code></pre>"},{"location":"contribution.html","title":"Contribution","text":""},{"location":"contribution.html#how-to-contribute","title":"How to contribute","text":"<p>We need contributors to help us build the language. If you are interested, please make contributions to the <code>radon-project/radon</code> repository.</p> <p>Steps to contribute:</p> <ol> <li>Fork the repository.</li> <li>Clone the repository.</li> <li>Create a new branch.</li> <li>Make changes.</li> <li>Commit changes.</li> <li>Push to the branch.</li> <li>Create a pull request.</li> </ol> <p>Before making a pull request create an issue and discuss the changes you want to make. If you have any questions, feel free to ask in the issues section.</p>"},{"location":"control-flow.html","title":"Control flow","text":""},{"location":"control-flow.html#conditional-statements","title":"Conditional statements","text":"<p>Conditional statements are used to execute code based on a condition. In Rain, the <code>if</code> statement is used to execute code if a condition is true. The <code>else</code> statement is used to execute code if the condition is false. The <code>elif</code> statement is used to execute code if the condition is false and another condition is true. The <code>else</code> statement is optional.</p> conditional-statements.rn<pre><code>if true {\n  print(\"true\")\n\n} else {\n  print(\"false\")\n}\n</code></pre> conditional-statements.rn<pre><code>if true {\n    print(\"true\")\n\n} elif false {\n    print(\"false\")\n\n} else {\n    print(\"neither\")\n}\n</code></pre>"},{"location":"data-types.html","title":"Data types","text":""},{"location":"data-types.html#basic-types","title":"Basic types","text":"<p>The basic types are:</p> <ul> <li><code>int</code> - integer number.</li> <li><code>float</code> - floating point number.</li> <li><code>bool</code> - boolean value.</li> <li><code>string</code> - string of characters.</li> </ul>"},{"location":"data-types.html#arrays","title":"Arrays","text":"<p>Arrays are declared using the <code>[]</code> syntax. The type of the array is the type of the elements it contains.</p> arrays.rn<pre><code>a = [1, 2, 3]; // a is an array of ints\nb = [1.0, 2.0, 3.0]; // b is an array of floats\nc = [\"a\", \"b\", \"c\"]; // c is an array of strings\n\n// Arrays can be nested\nd = [\n  [1, 2],\n  [3, 4],\n]; // d is an array of arrays of ints\n\n// Arrays can be empty\ne = []; // e is an empty array of unknown type\n</code></pre>"},{"location":"data-types.html#objects-development","title":"Objects (Development)","text":"<p>Objects are declared using the <code>{}</code> syntax. The type of the object is the type of the fields it contains.</p> objects.rn<pre><code>// a is an object with fields x and y of type int\na = { x: 1, y: 2 };\n// b is an object with fields x and y of type float\nb = { x: 1.0, y: 2.0 };\n// c is an object with fields x and y of type string\nc = { x: \"a\", y: \"b\" };\n\n// Objects can be nested\n// d is an object with fields x and w of type object\nd = { x: { y: 1, z: 2 }, w: { y: 3, z: 4 } };\n\n// Objects can be empty\n// e is an empty object of unknown type\ne = {};\n</code></pre>"},{"location":"exceptions.html","title":"Exceptions","text":"<p>Radon has a powerfull exception handler. It can handle exceptions and errors in the program. It can also throw exceptions and errors.</p>"},{"location":"exceptions.html#handling-exceptions","title":"Handling exceptions","text":"<p>To handle exceptions, we use the <code>try</code> and <code>catch</code> blocks. The <code>try</code> block contains the code that may throw an exception. The <code>catch</code> block contains the code that handles the exception.</p> exceptions.rn<pre><code>try {\n    // code that may throw an exception\n    a = 1 / 0\n} catch as err {\n    // code that handles the exception\n    print(\"Exception caught: \" + err)\n}\n</code></pre> <p>Output:</p> <pre><code>Exception caught: Division by zero\n</code></pre> <p>Don't forget to use the <code>as</code> keyword to assign the exception to a variable. The variable can be used to get the exception message. If you don't want to use the exception message, you can omit the variable.</p> exceptions.rn<pre><code>try {\n    // code that may throw an exception\n    a = 1 / 0\n} catch as _ {\n    // code that handles the exception\n    print(\"Exception caught\")\n}\n</code></pre> <p>Output:</p> <pre><code>Exception caught\n</code></pre>"},{"location":"exceptions.html#raise-exceptions","title":"Raise exceptions","text":"<p>To raise an exception, we use the <code>raise</code> keyword followed by the exception type and the message. We have builtin exceptions in <code>radiation</code> module. We can use them to raise exceptions.</p> exceptions.rn<pre><code>import radiation\n\nif 2 != 4 {\n    raise radiation.ValueError(\"2 != 4\")\n}\n</code></pre> <p>Output:</p> <pre><code>Radiation (most recent call last):\n  File &lt;stdin&gt;, line 2\nValueError: 2 + 2 != 4\n\n    raise radiation.ValueError(\"2 + 2 != 4\")\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre> <p>When the exception is raised, the program stops executing and the exception is propagated up the call stack. The exception can be caught by a <code>try</code> block. If the exception is not caught, the program stops executing and the exception is printed to the console.</p>"},{"location":"file-handling.html","title":"File handling","text":"<p>File handling is an essential part of any programming language. Radon provides a simple way to read and write files. In this section, we will learn how to read and write files in Radon.</p>"},{"location":"file-handling.html#file-modes","title":"File modes","text":"<p>When opening a file, we can specify the mode in which we want to open the file.</p> <p>The modes are:</p> <ul> <li><code>r</code>: Read mode. Opens the file for reading. The file must exist.</li> <li><code>w</code>: Write mode. Opens the file for writing. If the file does not exist,   it creates a new file. If the file exists, it truncates the file.</li> <li><code>a</code>: Append mode. Opens the file for writing. If the file does not exist,   it creates a new file. If the file exists, it appends the content to the file.</li> <li><code>r+</code>: Read and write mode. Opens the file for reading and writing.   The file must exist.</li> <li><code>w+</code>: Write and read mode. Opens the file for reading and writing.   If the file does not exist, it creates a new file. If the file exists,   it truncates the file.</li> <li><code>a+</code>: Append and read mode. Opens the file for reading and writing.   If the file does not exist, it creates a new file. If the file exists,   it appends the content to the file.</li> </ul> <p>By default, the file is opened in read mode.</p>"},{"location":"file-handling.html#reading-from-a-file","title":"Reading from a file","text":"<p>To manipulate files in Radon, we use built-in <code>File</code> class. We can create a new instance of <code>File</code> class by passing the file path to the constructor. We can then use the <code>read</code> method to read the contents of the file.</p> file-handling.rn<pre><code>file = File(\"file.txt\")\ncontent = file.read()\nprint(content)\n</code></pre> <p>You can also read the file line by line using the <code>readline</code> method.</p> file-handling.rn<pre><code>file = File(\"file.txt\")\nline = file.readline()\nprint(line)\n</code></pre> <p>You can also read all the lines of the file using the <code>readlines</code> method.</p> file-handling.rn<pre><code>file = File(\"file.txt\")\nlines = file.readlines()\nprint(lines)\n</code></pre>"},{"location":"file-handling.html#writing-to-a-file","title":"Writing to a file","text":"<p>To write to a file, we use the <code>write</code> method. We can pass the content to the <code>write</code> method to write to the file.</p> file-handling.rn<pre><code>file = File(\"file.txt\")\nfile.write(\"Hello, World!\")\n</code></pre>"},{"location":"file-handling.html#closing-a-file","title":"Closing a file","text":"<p>After reading or writing to a file, it is important to close the file. We can use the <code>close</code> method to close the file.</p> file-handling.rn<pre><code>file = File(\"file.txt\")\n# code that reads or writes to the file\nfile.close()\n</code></pre> <p>Check the file is closed or not using the <code>is_closed</code> method.</p> file-handling.rn<pre><code>file.is_closed()\n</code></pre> <p>That's it! You now know how to read and write files in Radon.</p>"},{"location":"functions.html","title":"Functions","text":""},{"location":"functions.html#types-of-functions","title":"Types of functions","text":"<p>Functions are the building blocks of a task. They are used to define the behavior of the program. In Radon, we declare functions using the <code>fun</code> keyword. It is followed by the name of the function, the parameters, and the return type. The body of the function is enclosed in curly braces.</p> <p>In Radon, there are three types of functions:</p> <ul> <li>Named functions</li> <li>Anonymous functions</li> <li>One-liner functions</li> </ul>"},{"location":"functions.html#named-functions","title":"Named functions","text":"named_functions.rn<pre><code>fun add(a, b) {\n    return a + b\n}\n</code></pre>"},{"location":"functions.html#anonymous-functions","title":"Anonymous functions","text":"anonymous_functions.rn<pre><code>add = fun (a, b) {\n    return a + b\n}\n</code></pre>"},{"location":"functions.html#one-liner-functions","title":"One-liner functions","text":"one_liner_functions.rn<pre><code>fun add(a, b) -&gt; a + b\n</code></pre>"},{"location":"functions.html#calling-functions","title":"Calling functions","text":"<p>Calling a function is done by using the function name followed by the arguments in parentheses.</p> calling_functions.rn<pre><code>add(1, 2) # Output: 3\n</code></pre> <p>That's it! You now know how to call functions in Radon.</p>"},{"location":"functions.html#function-parameters","title":"Function parameters","text":"<p>Function parameters are the names listed in the function definition. They are used to pass values into the function. The parameters are separated by commas. The parameters are optional.</p> <p>We can also leave out the parentheses if there are no parameters.</p> function_parameters.rn<pre><code>fun say_hello(name) {\n    print(\"Hello, \" + name + \"!\")\n}\n\nsay_hello(\"World\") # Output: Hello, World!\n</code></pre>"},{"location":"functions.html#default-parameters","title":"Default parameters","text":"<p>Default parameters are used to assign a default value to a parameter. If the parameter is not passed, the default value is used.</p> default_parameters.rn<pre><code>fun new_user(name=\"Guest\") {\n    print(\"Hello, \" + name + \"!\")\n}\n\nnew_user() # Output: Hello, Guest!\nnew_user(\"World\") # Output: Hello, World!\n</code></pre>"},{"location":"input-output.html","title":"Input Output","text":""},{"location":"input-output.html#printing-to-the-console","title":"Printing to the console","text":"<p>In Radon, we can print to the console using the <code>print</code> function. It is followed by the argument in parentheses. The argument are mandatory. It takes only one argument. We can concatenate data types using the <code>+</code> operator.</p> print.rn<pre><code>print(\"Hello\" + \", \" + \"World!\") # Output: Hello, World!\n</code></pre>"},{"location":"input-output.html#input-from-the-console","title":"Input from the console","text":"<p>In Radon, we can take input from the console using the <code>input</code> function. It is followed by the argument in parentheses. The argument are mandatory. It takes only one argument. We can concatenate data types using the <code>+</code> operator.</p> input.rn<pre><code>name = input(\"Enter your name: \")\nprint(\"Hello, \" + name + \"!\") # Output: Hello, World!\n</code></pre>"},{"location":"installation.html","title":"Installation","text":"<p>It's easy to install Radon on your computer. Just go to the downloads page and download the latest version for your operating system. Then, follow the instructions below for your operating system. If you have any problems, please contact us and we'll help you out.</p>"},{"location":"installation.html#windows","title":"Windows","text":"<p>To install Radon on Windows, just download the installer from the downloads page and run it. Then, follow the instructions on the screen to install Radon on your computer.</p> <p>After setup you need to manually configure the PATH environment variable. To do this, open the Control Panel and go to System and Security &gt; System &gt; Advanced system settings &gt; Environment Variables. Then, select the PATH variable and click Edit. Add the path to the Radon bin directory to the end of the variable value. For example, if you installed Radon in C:\\Program Files (x86)\\Radon, you would add C:\\Program Files (x86)\\Radon to the end of the variable value. Then, click OK to save the changes.</p> <p>Quick tip: You can also set the PATH variable from the command line. Just open a command prompt and type the following command:</p> Command prompt (Windows)<pre><code>setx PATH \"%PATH%;C:\\Program Files (x86)\\Radon\"\n</code></pre> <p>Now, you can open a command prompt and type radon to run Radon. If you get an error message, try restarting your computer and trying again.</p>"},{"location":"installation.html#macos","title":"macOS","text":"<p>Mac installer is not available yet. You can download the source code and build it yourself.</p>"},{"location":"installation.html#linux","title":"Linux","text":"<p>Linux installer is not available yet. You can download the source code and build it yourself.</p> <p> Linux users don't need any instructions!! </p>"},{"location":"language-reference.html","title":"Language Reference","text":""},{"location":"language-reference.html#under-maintenance","title":"Under Maintenance","text":"<p>The language reference is currently under maintenance. Please check back later.</p> <p>Thank you for your patience.</p>"},{"location":"loops.html","title":"Loops","text":"<p>Loops are used to execute a block of code multiple times. The block of code will be executed until the condition is true. This help us to reduce the code and execute the same block of code multiple times.</p> <p>In Radon we have 2 types of loops.</p> <ol> <li><code>for</code> loop.</li> <li><code>while</code> loop.</li> </ol>"},{"location":"loops.html#for-loop","title":"For loop","text":"<p>In for loop we have 2 varients.</p> <ol> <li><code>for</code> loop with range.</li> <li><code>for</code> loop with sequence of elements.</li> </ol>"},{"location":"loops.html#for-loop-with-range","title":"For loop with range","text":"<p>With range we can specify the start, end and step value. If step value is not provided then it will be 1.</p> <pre><code>for i=0 to 10 {\n    print(i)\n}\n</code></pre> <p>Output:</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre> <p>With step value. Here we are printing the even numbers.</p> <pre><code>for i=0 to 10 step 2 {\n    print(i)\n}\n</code></pre> <p>Output:</p> <pre><code>0\n2\n4\n6\n8\n</code></pre>"},{"location":"loops.html#for-loop-with-sequence-of-elements","title":"For loop with sequence of elements","text":"<p>With sequence of elements we can specify the elements in the loop. The loop will run for each element.</p> <p>Here we are using <code>Array</code> of elements. The loop will run for each element in the <code>Array</code>.</p> <pre><code>for i in [1, 2, 3, 4, 5] {\n    print(i)\n}\n</code></pre> <p>Output</p> <pre><code>1\n2\n3\n4\n5\n</code></pre> <p>Here we are using <code>String</code>. The loop will run for each character in the <code>String</code>.</p> <pre><code>for i in \"Hello\" {\n    print(i)\n}\n</code></pre> <p>Output:</p> <pre><code>H\ne\nl\nl\no\n</code></pre> <p>Here we are using <code>HashMap</code>. The loop will run for each key in the <code>HashMap</code>.</p> <pre><code>hash = {\"name\": \"John\", \"age\": 30}\nfor i in hash {\n    print(\"Key: \" + i)\n    print(\"Value: \" + hash[i])\n}\n</code></pre> <p>Output:</p> <pre><code>Key: name\nValue: John\nKey: age\nValue: 30\n</code></pre>"},{"location":"loops.html#while-loop","title":"While loop","text":"<p>With while loop we can specify the condition. The loop will run until the condition is true.</p> <pre><code>i = 0\nwhile i &lt; 5 {\n    print(i)\n    nonlocal i += 1\n}\n</code></pre> <p>Output:</p> <pre><code>0\n1\n2\n3\n4\n</code></pre> <p>We have used <code>nonlocal</code> keyword to update the value of <code>i</code> in the loop. If we don't use <code>nonlocal</code> then it will run into infinite loop.</p>"},{"location":"loops.html#loop-control-statements","title":"Loop control statements","text":"<p>In Radon we have 2 loop control statements.</p> <ol> <li><code>break</code></li> <li><code>continue</code></li> </ol>"},{"location":"loops.html#break","title":"Break","text":"<p>With <code>break</code> we can exit the loop.</p> <p>For loop example:</p> <pre><code>for i=0 to 10 {\n    if i == 5 {\n        break\n    }\n    print(i)\n}\n</code></pre> <p>Output:</p> <pre><code>0\n1\n2\n3\n4\n</code></pre> <p>While loop example:</p> <pre><code>i = 0\nwhile i &lt; 10 {\n    if i == 5 {\n        break\n    }\n    print(i)\n    nonlocal i += 1\n}\n</code></pre> <p>Output:</p> <pre><code>0\n1\n2\n3\n4\n</code></pre>"},{"location":"loops.html#continue","title":"Continue","text":"<p>With <code>continue</code> we can skip the current iteration and move to the next iteration.</p> <p>For loop example:</p> <pre><code>for i=0 to 5 {\n    if i == 3 {\n        continue\n    }\n    print(i)\n}\n</code></pre> <p>Output:</p> <pre><code>0\n1\n2\n4\n</code></pre> <p>While loop example:</p> <pre><code>i = 0\nwhile i &lt; 5 {\n    if i == 3 {\n        nonlocal i += 1\n        continue\n    }\n    print(i)\n    nonlocal i += 1\n}\n</code></pre> <p>Output:</p> <pre><code>0\n1\n2\n4\n</code></pre> <p>That's all about loops in Radon.</p>"},{"location":"modules.html","title":"Modules","text":""},{"location":"modules.html#introduction-to-modules","title":"Introduction to Modules","text":"<p>Modules are a way to organize code in a way that is easy to reuse, test, and debug. Modules are also called packages, libraries, or frameworks. Modules are used to group related code together. For example, a module can be used to group code that is related to a specific task, such as sending an email. Modules are also used to group code that is related to a specific feature, such as a user interface.</p>"},{"location":"modules.html#creating-a-module","title":"Creating a Module","text":"<p>A module is created by creating a file with the <code>.rn</code> extension. The file name is the name of the module. The name should have to be in Pascal Case <code>PascalCase</code>. The module have to implement the same name class as the file name. The class name should have to be in Pascal Case <code>PascalCase</code>.</p> Hello.rn<pre><code>class Hello {\n    fun Hello() {\n        print(\"Hello, World!\")\n    }\n}\n</code></pre>"},{"location":"modules.html#importing-a-module","title":"Importing a Module","text":"<p>A module is imported by using the <code>include</code> keyword. It is followed by the name of the module. The name of the module should have to be in Pascal Case <code>PascalCase</code>.</p> importing.rn<pre><code>include Hello\n</code></pre>"},{"location":"quick-start.html","title":"Quick start","text":"<p>To get started with Radon language you can use the built-in REPL or just run the Radon file. Run a Radon file by typing <code>radon -s &lt;filename&gt;.rn</code> in the command line. For example, if you have a file named <code>hello.rn</code> you can run it by typing <code>radon -s hello.rn</code> in the command line.</p>"},{"location":"quick-start.html#repl","title":"REPL","text":"<p>The REPL is a command line interface that allows you to run Radon code interactively. To start the REPL, just type <code>radon</code> in the command line. You can then type Radon code and it will be executed immediately. To exit the REPL, just type <code>exit()</code> or press <code>Ctrl + Z</code>.</p>"},{"location":"quick-start.html#hello-world","title":"Hello World","text":"<p>The first program that most people write in a new language is the \"Hello World\" program. This program simply prints the words \"Hello World\" to the screen. Here is the \"Hello World\" program in Radon:</p> HelloWorld.rn<pre><code>print(\"Hello World\")\n</code></pre>"},{"location":"standard-library.html","title":"Standard Library","text":""},{"location":"standard-library.html#list-of-standard-libraries","title":"List of Standard Libraries","text":"<pre><code>*\n\u251c\u2500\u2500 stdlib\n\u2502   \u251c\u2500\u2500 Argparser.rn\n\u2502   \u251c\u2500\u2500 Array.rn\n\u2502   \u251c\u2500\u2500 Math.rn\n\u2502   \u251c\u2500\u2500 String.rn\n\u2502   \u251c\u2500\u2500 System.rn\n\u2502   \u2514\u2500\u2500 Winlib.rn\n</code></pre> <p>... and more to come! Under development.</p>"},{"location":"strings.html","title":"Strings","text":""},{"location":"strings.html#string-methods","title":"String methods","text":"<ul> <li><code>str_len()</code> - returns the length of the string.</li> <li><code>str_find(string, index)</code> - returns the character at the specified index.</li> <li><code>str_slice(string, start, end)</code> - returns the substring from the specified   start index to the specified end index</li> </ul> methods.rn<pre><code>str = \"Hello, World!\"\n\nprint(str_len(str)) # 13\nprint(str_find(str, 0)) # H\nprint(str_find(str, 1)) # e\n\nprint(str_slice(str, 0, 5)) # Hello\n</code></pre>"},{"location":"strings.html#string-operators","title":"String operators","text":"<ul> <li><code>+</code> (concatenation)</li> <li><code>*</code> (repetition)</li> </ul> operators.rn<pre><code>str = \"Hello, World!\"\n\nprint(str + \" \" + \"Hello, World!\") # Hello, World! Hello, World!\nprint(str * 2) # Hello, World!Hello, World!\n</code></pre>"},{"location":"strings.html#string-type-casting","title":"String type casting","text":"<ul> <li><code>str()</code> - converts any value to a string</li> </ul> casting.rn<pre><code>print(str(123)) # 123\nprint(str(123.456)) # 123.456\nprint(str(true)) # true\nprint(str(false)) # false\n</code></pre>"},{"location":"strings.html#string-type-checking","title":"String type checking","text":"<ul> <li><code>is_str()</code> - returns <code>true</code> if the value is a string, otherwise <code>false</code></li> </ul> type-checking.rn<pre><code>print(is_str(\"Hello, World!\")) # true\nprint(is_str(123)) # false\nprint(is_str(123.456)) # false\nprint(is_str(true)) # false\nprint(is_str(false)) # false\n</code></pre>"},{"location":"tools.html","title":"Tools","text":""},{"location":"blog/hello-world.html","title":"Hello World","text":""},{"location":"blog/hello-world.html#introduction","title":"Introduction","text":"<p>We are excited to announce the launch Radon - a new open source programming language for the modern world. The language is designed to be simple, fast, and safe while incorporating modern language features such as type inference, pattern matching, and more. A key goal of the language is to be easy to learn and use, while still being powerful enough to build complex applications. It is also designed to be easy to embed in other applications, and to be used as a scripting language. The language is currently in the early stages of development, and we are looking for contributors to help us build the language.</p>"},{"location":"blog/hello-world.html#about-the-author","title":"About the author","text":"<p>Md. Almas Ali is a software engineer and a programming language enthusiast. He is the creator of the Radon programming language. He has a lot of projects in his GitHub profile. Checkout his GitHub profile for more information.</p> <p>Created on: 12 Sep 2023 - 2:39 AM (GMT+6)</p>"}]}