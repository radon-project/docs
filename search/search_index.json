{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"The Radon Programming Language","text":"<p> The Radon Programming Language </p> <p>Created by Md. Almas Ali</p> <p> </p> <p>Website: https://radon-project.github.io</p> <p>Documentation: https://radon-project.github.io/docs</p> <p>Github: https://github.com/radon-project/radon</p>"},{"location":"index.html#introduction","title":"Introduction","text":"<p>Radon is a programming language that is designed to be easy to learn and use. It is a high-level language intended to be used for general purpose programming. It is designed to be easy to learn and use, while still being powerful enough to be used for most tasks. Some of the features of Radon include:</p> <ul> <li>A simple syntax that is easy to learn and use</li> <li>Dynamic typing so that you don't have to worry about types</li> <li>Powerful standard library that makes it easy to do common tasks (Development)</li> <li>Easy to use package manager that makes it easy to install packages (Future feature)</li> <li>Functional programming support</li> <li>Object-oriented programming support (Development)</li> <li>Easy to use concurrency support (Future feature)</li> <li>Easy to use GUI library (Future feature)</li> <li>Easy to use web development library (Future feature)</li> <li>Advanced command line interface (Development)</li> <li>Easy to use networking library (Future feature)</li> <li>Easy to use database library (Future feature)</li> <li>Easy to use graphics library (Future feature)</li> </ul>"},{"location":"index.html#login-logic","title":"Login Logic","text":"Login.rn<pre><code># This is a Radon test file for the Radon Programming Language.\nclass Network {\nfun Network(username, password) {\nvar this.username = username\nvar this.password = password\n}\nfun login() {\nif this.username == \"radon\" {\nif this.password == \"password\" {\nprint(\"Log in successful\")\n}\n} else {\nprint(\"Invalid credentials\")\n}\n}\n}\nvar username = input(\"Enter you username: \")\nvar password = input(\"Enter your password: \")\nvar network = Network(username, password)\nnetwork.login()\n</code></pre>"},{"location":"index.html#sponsors","title":"Sponsors","text":"<p>No sponsors yet. Be the first one to sponsor this project. Become a sponsor</p>"},{"location":"built-in-functions.html","title":"Built-in Functions","text":""},{"location":"built-in-functions.html#types-of-built-in-functions","title":"Types of built-in functions","text":"<p>Built-in functions are the functions that are built into the language. They are used to perform common tasks. In Radon, there are a list of built-in functions that are available to use. They are:</p>"},{"location":"built-in-functions.html#utility-methods","title":"Utility methods","text":"<ul> <li><code>cls()</code></li> <li><code>clear()</code></li> <li><code>exit()</code></li> </ul>"},{"location":"built-in-functions.html#same-as-include-statement","title":"same as include statement","text":"<ul> <li><code>require()</code></li> </ul>"},{"location":"built-in-functions.html#command-line-arguments","title":"Command line arguments","text":"<ul> <li><code>sys_args()</code></li> </ul>"},{"location":"built-in-functions.html#api-methods","title":"API methods","text":"<ul> <li><code>pyapi(string)</code></li> </ul>"},{"location":"built-in-functions.html#typecase-methods","title":"Typecase methods","text":"<ul> <li><code>int()</code></li> <li><code>float()</code></li> <li><code>str()</code></li> <li><code>bool()</code></li> <li><code>type()</code></li> </ul>"},{"location":"built-in-functions.html#type-checker-methods","title":"Type checker methods","text":"<ul> <li><code>is_num()</code></li> <li><code>is_int()</code></li> <li><code>is_float()</code></li> <li><code>is_str()</code></li> <li><code>is_bool()</code></li> <li><code>is_array()</code></li> <li><code>is_fun()</code></li> </ul>"},{"location":"built-in-functions.html#string-methods","title":"String methods","text":"<ul> <li><code>str_len()</code></li> <li><code>str_find(string, index)</code></li> <li><code>str_slice(string, start, end)</code></li> </ul>"},{"location":"built-in-functions.html#io-methods","title":"I/O methods","text":"<ul> <li><code>print()</code></li> <li><code>print_ret()</code></li> <li><code>input()</code></li> <li><code>input_int()</code></li> </ul>"},{"location":"built-in-functions.html#array-methods","title":"Array methods","text":"<ul> <li><code>arr_len()</code></li> <li><code>arr_push(array, item)</code></li> <li><code>arr_pop(array, index)</code></li> <li><code>arr_append(array, item)</code></li> <li><code>arr_extend(array1, array2)</code></li> <li><code>arr_find(array, index)</code></li> <li><code>arr_slice(array, start, end)</code></li> </ul>"},{"location":"classes.html","title":"Classes","text":""},{"location":"classes.html#object-oriented-programming","title":"Object Oriented Programming","text":"<p>Object Oriented Programming (OOP) is a programming paradigm that uses objects and their interactions to design and program applications. It is based on the concept of objects rather than just functions and procedures. These objects are organized into classes, which allow individual objects to be grouped together. Most modern programming languages including Java, C/C++, and Python are object-oriented languages, and many older programming languages now have object-oriented versions. </p> <p>In Radon, we also have support for OOP. We can create classes and objects. We can also create methods and fields.</p>"},{"location":"classes.html#classes_1","title":"Classes","text":"<p>Let's start by creating a class. We can create a class using the <code>class</code> keyword. It is followed by the name of the class and the body of the class. The body of the class is enclosed in curly braces.</p> classes.rn<pre><code>class Person {\n# Class body\n}\n</code></pre>"},{"location":"classes.html#objects","title":"Objects","text":"<p>Now that we have created a class, we can create an object. We can create an object by simply calling the class like as a function. It is followed by the name of the class and the arguments in parentheses. The arguments are optional.</p> objects.rn<pre><code>var person = Person()\n</code></pre>"},{"location":"classes.html#fields","title":"Fields","text":"<p>Fields are the variables that are declared inside a class. They are used to store data. They are also called instance variables because they are unique to each instance of the class. They are declared using the <code>var</code> keyword. It is followed by the name of the field and the type of the field. The type of the field is optional.</p> fields.rn<pre><code>class Person {\nvar name = \"John\"\nvar age = 20\n}\n</code></pre>"},{"location":"classes.html#constructors","title":"Constructors","text":"<p>Constructors are special methods that are used to initialize the fields of a class. They are called when an object is created. They are declared using the <code>fun</code> keyword. It is followed by the name (class name) of the constructor and the parameters in parentheses. The parameters are optional.</p> constructors.rn<pre><code>class Person {\nfun Person(name, age) {\nvar this.name = name\nvar this.age = age\n}\n}\nvar person = Person(\"John\", 20)\n</code></pre>"},{"location":"classes.html#methods","title":"Methods","text":"<p>Methods are the functions that are declared inside a class. They are used to define the behavior of the class. They are declared using the <code>fun</code> keyword. It is followed by the name of the method, the parameters in parentheses, and the return type. The parameters and the return type are optional.</p> methods.rn<pre><code>class Person {\nfun Person(name, age) {\nvar this.name = name\nvar this.age = age\n}\nfun sayHello() {\nprint(\"Hello, \" + this.name + \"!\")\n}\n}\nvar person = Person(\"John\", 20)\nperson.sayHello() # Output: Hello, John!\n</code></pre>"},{"location":"contribution.html","title":"Contribution","text":""},{"location":"contribution.html#how-to-contribute","title":"How to contribute","text":"<p>We need contributors to help us build the language. If you are interested, please make contributions to the <code>radon-project/radon</code> repository.</p> <p>Steps to contribute:</p> <ol> <li>Fork the repository</li> <li>Clone the repository</li> <li>Create a new branch</li> <li>Make changes</li> <li>Commit changes</li> <li>Push to the branch</li> <li>Create a pull request</li> </ol> <p>Before making a pull request create an issue and discuss the changes you want to make. If you have any questions, feel free to ask in the issues section.</p>"},{"location":"control-flow.html","title":"Control flow","text":""},{"location":"control-flow.html#conditional-statements","title":"Conditional statements","text":"<p>Conditional statements are used to execute code based on a condition. In Rain, the <code>if</code> statement is used to execute code if a condition is true. The <code>else</code> statement is used to execute code if the condition is false. The <code>elif</code> statement is used to execute code if the condition is false and another condition is true. The <code>else</code> statement is optional.</p> conditional-statements.rn<pre><code>if true {\nprint(\"true\")\n} else {\nprint(\"false\")\n}\n</code></pre> conditional-statements.rn<pre><code>if true {\nprint(\"true\")\n} elif false {\nprint(\"false\")\n} else {\nprint(\"neither\")\n}\n</code></pre>"},{"location":"data-types.html","title":"Data types","text":""},{"location":"data-types.html#basic-types","title":"Basic types","text":"<p>The basic types are:</p> <ul> <li><code>int</code> - integer number</li> <li><code>float</code> - floating point number</li> <li><code>bool</code> - boolean value</li> <li><code>string</code> - string of characters</li> </ul>"},{"location":"data-types.html#arrays","title":"Arrays","text":"<p>Arrays are declared using the <code>[]</code> syntax. The type of the array is the type of the elements it contains.</p> arrays.rn<pre><code>var a = [1, 2, 3] // a is an array of ints\nvar b = [1.0, 2.0, 3.0] // b is an array of floats\nvar c = [\"a\", \"b\", \"c\"] // c is an array of strings\n// Arrays can be nested\nvar d = [[1, 2], [3, 4]] // d is an array of arrays of ints\n// Arrays can be empty\nvar e = [] // e is an empty array of unknown type\n</code></pre>"},{"location":"data-types.html#objects-development","title":"Objects (Development)","text":"<p>Objects are declared using the <code>{}</code> syntax. The type of the object is the type of the fields it contains.</p> objects.rn<pre><code>var a = {x: 1, y: 2} // a is an object with fields x and y of type int\nvar b = {x: 1.0, y: 2.0} // b is an object with fields x and y of type float\nvar c = {x: \"a\", y: \"b\"} // c is an object with fields x and y of type string\n// Objects can be nested\nvar d = {x: {y: 1, z: 2}, w: {y: 3, z: 4}} // d is an object with fields x and w of type object\n// Objects can be empty\nvar e = {} // e is an empty object of unknown type\n</code></pre>"},{"location":"functions.html","title":"Functions","text":""},{"location":"functions.html#types-of-functions","title":"Types of functions","text":"<p>Functions are the building blocks of a task. They are used to define the behavior of the program. In Radon, we declare functions using the <code>fun</code> keyword. It is followed by the name of the function, the parameters, and the return type. The body of the function is enclosed in curly braces.</p> <p>In Radon, there are three types of functions:</p> <ul> <li>Named functions</li> <li>Anonymous functions</li> <li>One-liner functions</li> </ul>"},{"location":"functions.html#named-functions","title":"Named functions","text":"named_functions.rn<pre><code>fun add(a, b) {\nreturn a + b\n}\n</code></pre>"},{"location":"functions.html#anonymous-functions","title":"Anonymous functions","text":"anonymous_functions.rn<pre><code>fun add = (a, b) {\nreturn a + b\n}\n</code></pre>"},{"location":"functions.html#one-liner-functions","title":"One-liner functions","text":"one_liner_functions.rn<pre><code>fun add(a, b) -&gt; a + b\n</code></pre>"},{"location":"functions.html#calling-functions","title":"Calling functions","text":"<p>Calling a function is done by using the function name followed by the arguments in parentheses.</p> calling_functions.rn<pre><code>add(1, 2) # Output: 3\n</code></pre> <p>That's it! You now know how to call functions in Radon.</p>"},{"location":"functions.html#function-parameters","title":"Function parameters","text":"<p>Function parameters are the names listed in the function definition. They are used to pass values into the function. The parameters are separated by commas. The parameters are optional.</p> <p>We can also leave out the parentheses if there are no parameters.</p> function_parameters.rn<pre><code>fun sayHello(name) {\nprint(\"Hello, \" + name + \"!\")\n}\nsayHello(\"World\") # Output: Hello, World!\n</code></pre>"},{"location":"input-output.html","title":"Input Output","text":""},{"location":"input-output.html#printing-to-the-console","title":"Printing to the console","text":"<p>In Radon, we can print to the console using the <code>print</code> function. It is followed by the argument in parentheses. The argument are mandatory. It takes only one argument. We can concatenate data types using the <code>+</code> operator.</p> print.rn<pre><code>print(\"Hello\" + \", \" + \"World!\") # Output: Hello, World!\n</code></pre>"},{"location":"input-output.html#input-from-the-console","title":"Input from the console","text":"<p>In Radon, we can take input from the console using the <code>input</code> function. It is followed by the argument in parentheses. The argument are mandatory. It takes only one argument. We can concatenate data types using the <code>+</code> operator.</p> input.rn<pre><code>var name = input(\"Enter your name: \")\nprint(\"Hello, \" + name + \"!\") # Output: Hello, World!\n</code></pre>"},{"location":"installation.html","title":"Installation","text":"<p>It's easy to install Radon on your computer. Just go to the downloads page and download the latest version for your operating system. Then, follow the instructions below for your operating system. If you have any problems, please contact us and we'll help you out.</p>"},{"location":"installation.html#windows","title":"Windows","text":"<p>To install Radon on Windows, just download the installer from the downloads page and run it. Then, follow the instructions on the screen to install Radon on your computer.</p> <p>After setup you need to manually configure the PATH environment variable. To do this, open the Control Panel and go to System and Security &gt; System &gt; Advanced system settings &gt; Environment Variables. Then, select the PATH variable and click Edit. Add the path to the Radon bin directory to the end of the variable value. For example, if you installed Radon in C:\\Program Files (x86)\\Radon, you would add C:\\Program Files (x86)\\Radon to the end of the variable value. Then, click OK to save the changes.</p> <p>Quick tip: You can also set the PATH variable from the command line. Just open a command prompt and type the following command:</p> Command prompt (Windows)<pre><code>setx PATH \"%PATH%;C:\\Program Files (x86)\\Radon\"\n</code></pre> <p>Now, you can open a command prompt and type radon to run Radon. If you get an error message, try restarting your computer and trying again.</p>"},{"location":"installation.html#macos","title":"macOS","text":"<p>Mac installer is not available yet. You can download the source code and build it yourself.</p>"},{"location":"installation.html#linux","title":"Linux","text":"<p>Linux installer is not available yet. You can download the source code and build it yourself.</p> <p> Linux users don't need any instructions!! </p>"},{"location":"modules.html","title":"Modules","text":""},{"location":"modules.html#introduction-to-modules","title":"Introduction to Modules","text":"<p>Modules are a way to organize code in a way that is easy to reuse, test, and debug. Modules are also called packages, libraries, or frameworks. Modules are used to group related code together. For example, a module can be used to group code that is related to a specific task, such as sending an email. Modules are also used to group code that is related to a specific feature, such as a user interface. </p>"},{"location":"quick-start.html","title":"Quick start","text":"<p>To get started with Radon language you can use the built-in REPL or just run the Radon file. Run a Radon file by typing <code>radon -s &lt;filename&gt;.rn</code> in the command line. For example, if you have a file named <code>hello.rn</code> you can run it by typing <code>radon -s hello.rn</code> in the command line. </p>"},{"location":"quick-start.html#repl","title":"REPL","text":"<p>The REPL is a command line interface that allows you to run Radon code interactively. To start the REPL, just type <code>radon</code> in the command line. You can then type Radon code and it will be executed immediately. To exit the REPL, just type <code>exit()</code> or press <code>Ctrl + Z</code>.</p>"},{"location":"quick-start.html#hello-world","title":"Hello World","text":"<p>The first program that most people write in a new language is the \"Hello World\" program. This program simply prints the words \"Hello World\" to the screen. Here is the \"Hello World\" program in Radon:</p> HelloWorld.rn<pre><code>print(\"Hello World\")\n</code></pre>"},{"location":"blog/hello-world.html","title":"Hello World","text":""},{"location":"blog/hello-world.html#introduction","title":"Introduction","text":"<p>We are excited to announce the launch Radon - a new open source programming language for the modern world. The language is designed to be simple, fast, and safe while incorporating modern language features such as type inference, pattern matching, and more. A key goal of the language is to be easy to learn and use, while still being powerful enough to build complex applications. It is also designed to be easy to embed in other applications, and to be used as a scripting language. The language is currently in the early stages of development, and we are looking for contributors to help us build the language.</p>"},{"location":"blog/hello-world.html#about-the-author","title":"About the author","text":"<p>Md. Almas Ali is a software engineer and a programming language enthusiast. He is the creator of the Radon programming language. He has a lot of projects in his GitHub profile. Checkout his GitHub profile for more information.</p>"}]}